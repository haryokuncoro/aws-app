name: Deploy to AWS ECS (Dynamic Tag)

on:
  push:
    tags:
      - 'staging-*'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        run: gradle clean bootJar --no-daemon

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Docker image
        run: |
          IMAGE_TAG=${GITHUB_REF#refs/tags/}
          ECR_REPO=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/myapp
          
          echo "Building Docker image with tag: $IMAGE_TAG"
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker push $ECR_REPO:$IMAGE_TAG

      - name: Register new ECS task definition
        run: |
          IMAGE_TAG=${GITHUB_REF#refs/tags/}
          AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          ECR_IMAGE=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/myapp:$IMAGE_TAG

          echo "Registering task definition with image: $ECR_IMAGE"

          aws ecs register-task-definition \
            --family myapp-task \
            --requires-compatibilities FARGATE \
            --network-mode awsvpc \
            --cpu 512 \
            --memory 1024 \
            --execution-role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/ecsTaskExecutionRole \
            --container-definitions '[{"name":"myapp","image":"'"$ECR_IMAGE"'","essential":true,"portMappings":[{"containerPort":8080,"protocol":"tcp"}]}]'
      

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster myapp \
            --service web-app-service-u63fgyig \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
